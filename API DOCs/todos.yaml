openapi: 3.0.3
info:
  title: "MIBs Technology API"
  version: "1.0.0"
  description: API that allow users to Create Todo and Get,Update and Delete an existing Todo
  license:
    name: MIBS Technology
    url: htttp://mibstechnologies.com
  contact:
    name: MIBS Technology Team
    url: htttp://mibstechnologies.com
    email: info@mibstechnologies.com
externalDocs:
  description: More of Todo Api
  url: htttp://mibstechnologies.com

servers:
  - url: http://localhost:8080/v1
security: []
paths:
  /todos:
    summary: All todos
    get:
      operationId: GetAllTodo
      description: Obtain all Todo from the Database
      summary: return all todos
      parameters:
        - name: bodyLimit
          in: query
          description: The Amount of todos returnd
          schema:
            type: integer
            minimum: 10
            maximum: 20
            example: 15
        - name: pageLimit
          in: query
          description: The pages to return todos
          schema:
            type: integer
            minimum: 1
            maximum: 5
            example: 2
      responses:
        200:
          description: Sucessfully pull of todos data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/todos"
        400:
          description: Fail
          content:
            application/json:
              schema:
                type: string
    post:
      operationId: PostNewTodo
      description: Create new Todo in the database
      summary: "Create New Todo"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/todos"

      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/todos"
        400:
          description: Fail

  /todos/{id}:
    get:
      operationId: GetSingleTodo
      description: Obtain Single Todo from the Database
      summary: return single todos
      parameters:
        - in: path
          name: id
          required: true
          description: The Id of the Todo
          schema:
            type: string
            example: 2aerf325fg5kd2
      responses:
        200:
          description: Sucessfully pull of todos data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/todos"
        400:
          description: Fail
          content:
            application/json:
              schema:
                type: string
    put:
      operationId: UpdateTodoById
      description: update data Todo
      summary: "put todos by Id"
      parameters:
        - in: path
          name: id
          required: true
          description: The Id of the Todo
          schema:
            type: string
            example: 2aerf325fg5kd2
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/todos"
        400:
          description: Fail
  /mark/{id}:
    patch:
      operationId: PatchTodoById
      description: patch specific status column of Todo
      summary: "patch todos by Id"
      parameters:
        - in: path
          name: id
          required: true
          description: The Id of the Todo
          schema:
            type: string
            example: 2aerf325fg5kd2
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/mark"
        400:
          description: Fail

  /deadline/{id}:
    patch:
      operationId: ChangeTodoById
      description: patch specific deadline column of Todo
      summary: "patch todos by Id"
      parameters:
        - in: path
          name: id
          required: true
          description: The Id of the Todo
          schema:
            type: string
            example: 2aerf325fg5kd2
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/deadline"
        400:
          description: Fail
  /delete/{id}:
    delete:
      operationId: DeleteTodoById
      description: Delete specific Todo
      summary: "delete todos by Id"
      parameters:
        - in: path
          name: id
          required: true
          description: The Id of the Todo
          schema:
            type: string
            example: 2aerf325fg5kd2
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/delete"
        400:
          description: Fail

components:
  schemas:
    todos:
      description: Model containing Todo info
      properties:
        id:
          type: string
          example: 2aerf325fg5kd2
        todos name:
          type: string
          example: Golang
        todos description:
          type: string
          example: Learn  Basic of Golang
        todos status:
          type: string
          example: Undone/Done
        todos deadline:
          type: string
          example: 30days
        acepted_date:
          type: integer
          example: 0000-00-00
        updated_date:
          type: integer
          example: 0000-00-00

    deadline:
      description: Model containing Todo info
      properties:
        id:
          type: string
          example: 2aerf325fg5kd2
        todos status:
          type: string
          example: Undone/Done
    mark:
      description: Model containing Todo info
      properties:
        id:
          type: string
          example: 2aerf325fg5kd2
        todos deadline:
          type: string
          example: 30days
    delete:
      description: Model containing Todo info
      properties:
        id:
          type: string
          example: 2aerf325fg5kd2
